generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(uuid())
  email                String             @unique
  accountId            String             @unique
  role                 RoleType           @default(USER)
  username             String?
  provider             String?
  lastLogin            DateTime?
  createdOn            DateTime           @default(now())
  isOnline             Boolean            @default(false)
  isVerified           Boolean            @default(false)
  isVendor             Boolean            @default(false)
  passwordResetToken   String?
  passwordResetExpires DateTime?
  Event                Event[]
  Vendor               Vendor[]
  VendorAccount        VendorAccount[]
  EventTransaction     EventTransaction[]

  @@unique(id)
  @@index([email])
}

model Category {
  id          String   @id @default(uuid())
  name        String?
  description String?
  active      Boolean  @default(true)
  createdBy   String?
  createdOn   DateTime @default(now())
  updatedBy   String?
  updatedOn   DateTime @default(now())
}

model Event {
  id           String         @id @default(uuid())
  userId       String
  category     String
  title        String
  description  String?
  locationType String?
  location     String?
  StartDate    DateTime?
  EndDate      DateTime?
  StartTime    String?
  EndTime      String?
  AllDay       Boolean?       @default(false)
  image_banner String?
  image_tile   String?
  currency     String?
  isPublished  Boolean?       @default(false)
  active       Boolean        @default(true)
  platformFee  Boolean        @default(false)
  createdBy    String?
  createdOn    DateTime       @default(now())
  updatedBy    String?
  updatedOn    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  EventContact EventContact[]

  EventTicket EventTicket[]

  EventTransaction EventTransaction[]

  ChargeSetup ChargeSetup[]
}

model EventContact {
  id        String   @id @default(uuid())
  email     String?
  phone     String?
  facebook  String?
  instagram String?
  twitter   String?
  eventId   String
  active    Boolean  @default(true)
  createdBy String?
  createdOn DateTime @default(now())
  updatedBy String?
  updatedOn DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
}

model EventTicket {
  id          String   @id @default(uuid())
  type        String
  name        String
  description String?
  price       Decimal  @default(0)
  quantity    Int
  eventId     String
  active      Boolean  @default(true)
  createdBy   String?
  createdOn   DateTime @default(now())
  updatedBy   String?
  updatedOn   DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
}

model Vendor {
  id        String   @id @default(uuid())
  userId    String
  firstName String
  lastName  String
  phone     String
  email     String
  company   String
  jobTitle  String?
  website   String?
  photo     String?
  active    Boolean  @default(true)
  createdBy String?
  createdOn DateTime @default(now())
  updatedBy String?
  updatedOn DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model VendorAccount {
  id            String @id @default(uuid())
  userId        String @unique()
  bankName      String
  bankCode      String
  accountName   String
  accountNumber String
  accountId     String
  currency      String

  active    Boolean  @default(true)
  createdBy String?
  createdOn DateTime @default(now())
  updatedBy String?
  updatedOn DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model EventTransaction {
  id        String        @id @default(uuid())
  batchId   String
  eventId   String
  eventName String
  userId    String
  ticketId  String
  ticket    String
  price     Decimal       @default(0)
  status    PaymentStatus @default(PENDING)
  checkIn   Boolean?      @default(false)
  active    Boolean       @default(true)
  createdBy String?
  createdOn DateTime      @default(now())
  updatedBy String?
  updatedOn DateTime      @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model ChargeSetup {
  id        String   @id @default(uuid())
  eventId   String
  type      String
  value     Float    @default(0)
  active    Boolean  @default(true)
  createdBy String?
  createdOn DateTime @default(now())
  updatedBy String?
  updatedOn DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
}

enum RoleType {
  USER
  VENDOR
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
